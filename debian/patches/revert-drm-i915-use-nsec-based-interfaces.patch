diff --git a/debian/patches/revert-drm-i915-use-nsec-based-interfaces.patch b/debian/patches/revert-drm-i915-use-nsec-based-interfaces.patch
index ca948fb..e69de29 100644
--- a/debian/patches/revert-drm-i915-use-nsec-based-interfaces.patch
+++ b/debian/patches/revert-drm-i915-use-nsec-based-interfaces.patch
@@ -1,150 +0,0 @@
-diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
-index 63bcda5..9fc6a00 100644
---- a/drivers/gpu/drm/i915/i915_drv.h
-+++ b/drivers/gpu/drm/i915/i915_drv.h
-@@ -1055,7 +1055,7 @@ struct intel_ilk_power_mgmt {
- 	unsigned long last_time1;
- 	unsigned long chipset_power;
- 	u64 last_count2;
--	u64 last_time2;
-+	struct timespec last_time2;
- 	unsigned long gfx_power;
- 	u8 corr;
- 
-diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
-index 4a9faea..0613e72 100644
---- a/drivers/gpu/drm/i915/i915_gem.c
-+++ b/drivers/gpu/drm/i915/i915_gem.c
-@@ -1210,16 +1210,16 @@ static bool can_wait_boost(struct drm_i915_file_private *file_priv)
- int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
- 			unsigned reset_counter,
- 			bool interruptible,
--			s64 *timeout,
-+			struct timespec *timeout,
- 			struct drm_i915_file_private *file_priv)
- {
- 	struct drm_device *dev = ring->dev;
- 	struct drm_i915_private *dev_priv = dev->dev_private;
- 	const bool irq_test_in_progress =
- 		ACCESS_ONCE(dev_priv->gpu_error.test_irq_rings) & intel_ring_flag(ring);
-+	struct timespec before, now;
- 	DEFINE_WAIT(wait);
- 	unsigned long timeout_expire;
--	s64 before, now;
- 	int ret;
- 
- 	WARN(!intel_irqs_enabled(dev_priv), "IRQs disabled");
-@@ -1227,8 +1227,7 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
- 	if (i915_seqno_passed(ring->get_seqno(ring, true), seqno))
- 		return 0;
- 
--	timeout_expire = timeout ?
--		jiffies + nsecs_to_jiffies_timeout((u64)*timeout) : 0;
-+	timeout_expire = timeout ? jiffies + timespec_to_jiffies_timeout(timeout) : 0;
- 
- 	if (INTEL_INFO(dev)->gen >= 6 && ring->id == RCS && can_wait_boost(file_priv)) {
- 		gen6_rps_boost(dev_priv);
-@@ -1243,7 +1242,7 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
- 
- 	/* Record current time in case interrupted by signal, or wedged */
- 	trace_i915_gem_request_wait_begin(ring, seqno);
--	before = ktime_get_raw_ns();
-+	getrawmonotonic(&before);
- 	for (;;) {
- 		struct timer_list timer;
- 
-@@ -1292,7 +1291,7 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
- 			destroy_timer_on_stack(&timer);
- 		}
- 	}
--	now = ktime_get_raw_ns();
-+	getrawmonotonic(&now);
- 	trace_i915_gem_request_wait_end(ring, seqno);
- 
- 	if (!irq_test_in_progress)
-@@ -1301,9 +1300,10 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
- 	finish_wait(&ring->irq_queue, &wait);
- 
- 	if (timeout) {
--		s64 tres = *timeout - (now - before);
--
--		*timeout = tres < 0 ? 0 : tres;
-+		struct timespec sleep_time = timespec_sub(now, before);
-+		*timeout = timespec_sub(*timeout, sleep_time);
-+		if (!timespec_valid(timeout)) /* i.e. negative time remains */
-+			set_normalized_timespec(timeout, 0, 0);
- 
- 		/*
- 		 * Apparently ktime isn't accurate enough and occasionally has a
-@@ -2914,10 +2914,16 @@ i915_gem_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
- 	struct drm_i915_gem_wait *args = data;
- 	struct drm_i915_gem_object *obj;
- 	struct intel_engine_cs *ring = NULL;
-+	struct timespec timeout_stack, *timeout = NULL;
- 	unsigned reset_counter;
- 	u32 seqno = 0;
- 	int ret = 0;
- 
-+	if (args->timeout_ns >= 0) {
-+		timeout_stack = ns_to_timespec(args->timeout_ns);
-+		timeout = &timeout_stack;
-+	}
-+
- 	if (args->flags != 0)
- 		return -EINVAL;
- 
-@@ -2947,7 +2953,7 @@ i915_gem_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
- 	/* Do this after OLR check to make sure we make forward progress polling
- 	 * on this IOCTL with a timeout <=0 (like busy ioctl)
- 	 */
--	if (args->timeout_ns <= 0) {
-+-	if (!args->timeout_ns) {
- 		ret = -ETIME;
- 		goto out;
- 	}
-@@ -2956,8 +2962,10 @@ i915_gem_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
- 	reset_counter = atomic_read(&dev_priv->gpu_error.reset_counter);
- 	mutex_unlock(&dev->struct_mutex);
- 
--	return __i915_wait_seqno(ring, seqno, reset_counter, true,
--				 &args->timeout_ns, file->driver_priv);
-+	ret = __wait_seqno(ring, seqno, reset_counter, true, timeout, file->driver_priv);
-+	if (timeout)
-+		args->timeout_ns = timespec_to_ns(timeout);
-+	return ret;
- 
- out:
- 	drm_gem_object_unreference(&obj->base);
-diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
-index 1f4b56e..1f2b6fa 100644
---- a/drivers/gpu/drm/i915/intel_pm.c
-+++ b/drivers/gpu/drm/i915/intel_pm.c
-@@ -4206,7 +4206,7 @@ static void ironlake_enable_drps(struct drm_device *dev)
- 		I915_READ(0x112e0);
- 	dev_priv->ips.last_time1 = jiffies_to_msecs(jiffies);
- 	dev_priv->ips.last_count2 = I915_READ(0x112f4);
--	dev_priv->ips.last_time2 = ktime_get_raw_ns();
-+	getrawmonotonic(&dev_priv->ips.last_time2);
- 
- 	spin_unlock_irq(&mchdev_lock);
- }
-@@ -5825,14 +5825,14 @@ static u16 pvid_to_extvid(struct drm_i915_private *dev_priv, u8 pxvid)
- 
- static void __i915_update_gfx_val(struct drm_i915_private *dev_priv)
- {
--	u64 now, diff, diffms;
--	u32 count;
-+	struct timespec now, diff1;
-+	u64 diff;
-+	unsigned long diffms;
- 
- 	assert_spin_locked(&mchdev_lock);
- 
--	now = ktime_get_raw_ns();
--	diffms = now - dev_priv->ips.last_time2;
--	do_div(diffms, NSEC_PER_MSEC);
-+	getrawmonotonic(&now);
-+	diff1 = timespec_sub(now, dev_priv->ips.last_time2);
- 
- 	/* Don't divide by 0 */
- 	if (!diffms)
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 63bcda5..9fc6a00 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1055,7 +1055,7 @@ struct intel_ilk_power_mgmt {
 	unsigned long last_time1;
 	unsigned long chipset_power;
 	u64 last_count2;
-	u64 last_time2;
+	struct timespec last_time2;
 	unsigned long gfx_power;
 	u8 corr;
 
diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c
index 4a9faea..0613e72 100644
--- a/drivers/gpu/drm/i915/i915_gem.c
+++ b/drivers/gpu/drm/i915/i915_gem.c
@@ -1210,16 +1210,16 @@ static bool can_wait_boost(struct drm_i915_file_private *file_priv)
 int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
 			unsigned reset_counter,
 			bool interruptible,
-			s64 *timeout,
+			struct timespec *timeout,
 			struct drm_i915_file_private *file_priv)
 {
 	struct drm_device *dev = ring->dev;
 	struct drm_i915_private *dev_priv = dev->dev_private;
 	const bool irq_test_in_progress =
 		ACCESS_ONCE(dev_priv->gpu_error.test_irq_rings) & intel_ring_flag(ring);
+	struct timespec before, now;
 	DEFINE_WAIT(wait);
 	unsigned long timeout_expire;
-	s64 before, now;
 	int ret;
 
 	WARN(!intel_irqs_enabled(dev_priv), "IRQs disabled");
@@ -1227,8 +1227,7 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
 	if (i915_seqno_passed(ring->get_seqno(ring, true), seqno))
 		return 0;
 
-	timeout_expire = timeout ?
-		jiffies + nsecs_to_jiffies_timeout((u64)*timeout) : 0;
+	timeout_expire = timeout ? jiffies + timespec_to_jiffies_timeout(timeout) : 0;
 
 	if (INTEL_INFO(dev)->gen >= 6 && ring->id == RCS && can_wait_boost(file_priv)) {
 		gen6_rps_boost(dev_priv);
@@ -1243,7 +1242,7 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
 
 	/* Record current time in case interrupted by signal, or wedged */
 	trace_i915_gem_request_wait_begin(ring, seqno);
-	before = ktime_get_raw_ns();
+	getrawmonotonic(&before);
 	for (;;) {
 		struct timer_list timer;
 
@@ -1292,7 +1291,7 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
 			destroy_timer_on_stack(&timer);
 		}
 	}
-	now = ktime_get_raw_ns();
+	getrawmonotonic(&now);
 	trace_i915_gem_request_wait_end(ring, seqno);
 
 	if (!irq_test_in_progress)
@@ -1301,9 +1300,10 @@ int __i915_wait_seqno(struct intel_engine_cs *ring, u32 seqno,
 	finish_wait(&ring->irq_queue, &wait);
 
 	if (timeout) {
-		s64 tres = *timeout - (now - before);
-
-		*timeout = tres < 0 ? 0 : tres;
+		struct timespec sleep_time = timespec_sub(now, before);
+		*timeout = timespec_sub(*timeout, sleep_time);
+		if (!timespec_valid(timeout)) /* i.e. negative time remains */
+			set_normalized_timespec(timeout, 0, 0);
 
 		/*
 		 * Apparently ktime isn't accurate enough and occasionally has a
@@ -2914,10 +2914,16 @@ i915_gem_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
 	struct drm_i915_gem_wait *args = data;
 	struct drm_i915_gem_object *obj;
 	struct intel_engine_cs *ring = NULL;
+	struct timespec timeout_stack, *timeout = NULL;
 	unsigned reset_counter;
 	u32 seqno = 0;
 	int ret = 0;
 
+	if (args->timeout_ns >= 0) {
+		timeout_stack = ns_to_timespec(args->timeout_ns);
+		timeout = &timeout_stack;
+	}
+
 	if (args->flags != 0)
 		return -EINVAL;
 
@@ -2947,7 +2953,7 @@ i915_gem_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
 	/* Do this after OLR check to make sure we make forward progress polling
 	 * on this IOCTL with a timeout <=0 (like busy ioctl)
 	 */
-	if (args->timeout_ns <= 0) {
+-	if (!args->timeout_ns) {
 		ret = -ETIME;
 		goto out;
 	}
@@ -2956,8 +2962,10 @@ i915_gem_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *file)
 	reset_counter = atomic_read(&dev_priv->gpu_error.reset_counter);
 	mutex_unlock(&dev->struct_mutex);
 
-	return __i915_wait_seqno(ring, seqno, reset_counter, true,
-				 &args->timeout_ns, file->driver_priv);
+	ret = __wait_seqno(ring, seqno, reset_counter, true, timeout, file->driver_priv);
+	if (timeout)
+		args->timeout_ns = timespec_to_ns(timeout);
+	return ret;
 
 out:
 	drm_gem_object_unreference(&obj->base);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 1f4b56e..807cbd6 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -4206,7 +4206,7 @@ static void ironlake_enable_drps(struct drm_device *dev)
 		I915_READ(0x112e0);
 	dev_priv->ips.last_time1 = jiffies_to_msecs(jiffies);
 	dev_priv->ips.last_count2 = I915_READ(0x112f4);
-	dev_priv->ips.last_time2 = ktime_get_raw_ns();
+	getrawmonotonic(&dev_priv->ips.last_time2);
 
 	spin_unlock_irq(&mchdev_lock);
 }
@@ -5825,14 +5825,15 @@ static u16 pvid_to_extvid(struct drm_i915_private *dev_priv, u8 pxvid)
 
 static void __i915_update_gfx_val(struct drm_i915_private *dev_priv)
 {
-	u64 now, diff, diffms;
+	struct timespec now, diff1;
+	u64 diff;
+	unsigned long diffms;
 	u32 count;
 
 	assert_spin_locked(&mchdev_lock);
 
-	now = ktime_get_raw_ns();
-	diffms = now - dev_priv->ips.last_time2;
-	do_div(diffms, NSEC_PER_MSEC);
+	getrawmonotonic(&now);
+	diff1 = timespec_sub(now, dev_priv->ips.last_time2);
 
 	/* Don't divide by 0 */
 	if (!diffms)
